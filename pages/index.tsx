
// import type { GetStaticProps } from 'next'
import { useState, useEffect} from 'react'
import requests from "../utils/requests"
import Head from 'next/head'
import Link from 'next/link'
import About from '../components/About'
import ContactMe from '../components/ContactMe'
import Header from '../components/Header'
import Hero from '../components/Hero'
import Projects from '../components/Projects'
import Skills from '../components/Skills'
import WorkExperience from '../components/WorkExperience'
import { ArrowUpCircleIcon } from '@heroicons/react/24/solid'
import Spinner from '../components/Spinner'
import { Experience, PageInfo, Project, Skill, Social } from '../typings'
import { useInView } from 'react-intersection-observer';
interface Props  {
  pageInfo: PageInfo | null | undefined ,
  experiences: Experience[]
  skills: Skill[]
  projects: Project[],
  socials: Social[]
}

// const Home = ({ pageInfo, experiences, skills, projects, socials }: Props) => {
const Home = ({}) => {
  const [pageInfo, setPageInfo] = useState<PageInfo | null | undefined>(undefined)
  const [experiences, setExperiences] = useState<Experience[]>([])
  const [skills, setSkills] = useState<Skill[]>([])
  const [projects, setProjects] = useState<Project[]>([])
  const [socials, setSocials] = useState<Social[]>([])
  const [loading, setLoading] = useState(false)

  const { ref, inView, entry } = useInView({
    /* Optional options */
    threshold: 0,
  });
  
  useEffect(() => {
    setLoading(true)
    async function fetchAll(){
      const [
        pageInfo,
        experiences,
        skills,
        projects,
        socials,
      ] = await Promise.all([
        fetch(requests.fetchPageInf).then((res) => res.json()),
        fetch(requests.fetchExp).then((res) => res.json()),
        fetch(requests.fetchSkil).then((res) => res.json()),
        fetch(requests.fetchProj).then((res) => res.json()),
        fetch(requests.fetchSoci).then((res) => res.json())
      ])
       setPageInfo(pageInfo.pageInfo)
       setExperiences(experiences.experiences)
       setSkills(skills.skills)
       setProjects(projects.projects)
       setSocials(socials.socials)
    setLoading(false)
    }
    fetchAll()
  }, [])


  return (
    <div className="bg-[rgb(36,36,36)] text-white h-screen snap-y snap-mandatory scroll-smooth overflow-y-scroll overflow-x-hidden z-0 appScrollbar">

      <Head>
        <title>Marvin`s Portfolio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      { loading &&
      <div className="flex items-center justify-center h-screen text-2xl">
        <Spinner />
      </div>
      }

      {socials.length !== 0 &&
        <Header socials={socials} />
      }

    {pageInfo !== undefined &&
      <section id="hero" className="snap-start">
        <Hero pageInfo={pageInfo} ref={ref}  />
      </section>
     }

    {pageInfo?.profilePic &&
      <section id="about" className="snap-center">
        <About pageInfo={pageInfo} />
      </section>
    }

    {skills.length !== 0 &&
      <section id="skills" className="snap-start">
        <Skills skills={skills} />
      </section>
    }

    {experiences.length > 0 &&
      <section id="experience" className="snap-center xl:snap-start">
        <WorkExperience experiences={experiences} />
      </section>
    }   

    {projects.length !== 0 &&
      <section id="projects" className="snap-start">
        <Projects projects={projects} />
      </section>
    } 

    {projects.length !== 0 &&
        <section id="contact" className="snap-start">
          <ContactMe />
        </section>
    }

    {projects.length !== 0 && !inView &&
      <Link href="#hero">
        <footer className="absolute z-10 bottom-5 right-2 md:right-8 lg:right-10">
          <ArrowUpCircleIcon className="text-right text-gray-400 bg-transparent rounded-full cursor-pointer w-14 h-14 filter grayscale hover:text-gray-50" />
        </footer>
      </Link>
    }
    </div>
  )
}

export default Home

// export const getStaticProps: GetStaticProps<Props> = async() => {
//   // const pageInfo: PageInfo =  await fetchPageInfo()
//   // const experiences: Experience[] =  await fetchExperiences()
//   // const skills: Skill[] =  await fetchSkills()
//   // const projects: Project[] =  await fetchProjects()
//   // const socials: Social[] =  await fetchSocials()

//   const [
//     pageInfo,
//     experiences,
//     skills,
//     projects,
//     socials,
//   ] = await Promise.all([
//     // fetch(requests.fetchPageInf).then((res) => res.json()),
//     // fetch(requests.fetchExp).then((res) => res.json()),
//     // fetch(requests.fetchSkil).then((res) => res.json()),
//     // fetch(requests.fetchProj).then((res) => res.json()),
//     // fetch(requests.fetchSoci).then((res) => res.json())


//     axios.get(requests.fetchPageInf).then((res) => res.data),
//     axios.get(requests.fetchExp).then((res) => res.data),
//     axios.get(requests.fetchSkil).then((res) => res.data),
//     axios.get(requests.fetchProj).then((res) => res.data),
//     axios.get(requests.fetchSoci).then((res) => res.data)
//   ])
//   // console.log('pageInfo at index', pageInfo.pageInfo)
//   // console.log('experiences at index', experiences.experiences)
//   // console.log('skills at index', skills.skills)
//   // console.log('socials at index', socials.socials)



//   return {
//     props: {
//       pageInfo: pageInfo.pageInfo,
//       experiences: experiences.experiences,
//       skills: skills.skills,
//       projects: projects.projects,
//       socials: socials.socials
//       // pageInfo,
//       // experiences,
//       // skills,
//       // projects,
//       // socials,
//     },
//     // Next will try and regenerate the page after n time of seconds
//     // revalidate: 10000
//   }
// }